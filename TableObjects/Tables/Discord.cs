// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Discord.cs" company="SalemsTools">
//   Do whatever
// </copyright>
// <summary>
//   Defines the Discord type.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace TableObjects.Tables
{
    using System;
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Xml.Linq;

    using DSharpPlus.Entities;

    /// <summary>
    /// Discord Class. Handles Tables in Discord
    /// </summary>
    public class Discord
    {
        /// <summary>
        /// Table of Slave Reports
        /// </summary>
        [Table(Name = "SlaveReports")]
        public class SlaveReport
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="SlaveReport"/> class.
            /// Create new SlaveReport
            /// </summary>
            public SlaveReport()
            {
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="SlaveReport"/> class.
            /// </summary>
            /// <param name="datetime">
            /// Time of Creation
            /// </param>
            /// <param name="user">
            /// User from Discord
            /// </param>
            /// <param name="edges">
            /// Edges done
            /// </param>
            /// <param name="time">
            /// Timespan of Task
            /// </param>
            /// <param name="outcome">
            /// Outcome of Task
            /// </param>
            public SlaveReport(DateTime datetime, DiscordUser user, int edges, TimeSpan time, Outcome outcome)
            {
                this.TimeOfReport = datetime;
                this.UserId = Convert.ToInt64(user.Id);
                this.Edges = edges;
                this.TimeSpan = time.Ticks;
                this.SessionOutcome = outcome.ToString();
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="SlaveReport"/> class.
            /// </summary>
            /// <param name="datetime">
            /// Time of Creation
            /// </param>
            /// <param name="user">
            /// User from Discord
            /// </param>
            /// <param name="edges">
            /// Edges done
            /// </param>
            /// <param name="time">
            /// Timespan of Task
            /// </param>
            /// <param name="outcome">
            /// Outcome of Task
            /// </param>
            public SlaveReport(DateTime datetime, DiscordUser user, int edges, TimeSpan time, string outcome)
                : this(datetime, user, edges, time, (Outcome)Enum.Parse(typeof(Outcome), outcome))
            {
            }

            /// <summary>
            /// Outcome of Task for Report
            /// </summary>
            [Flags]
            public enum Outcome
            {
                /// <summary>
                /// No touching allowed.
                /// </summary>
                Denial = 1,

                /// <summary>
                /// Only ruins allowed
                /// </summary>
                Ruin = 2,

                /// <summary>
                /// Have fun :3
                /// </summary>
                Orgasm = 4,

                /// <summary>
                /// A Task for the User to do.
                /// </summary>
                Task = 8
            }

            /// <summary>
            /// Gets or sets the edges to do.
            /// </summary>
            [Column]
            public int Edges { get; set; }

            /// <summary>
            /// Gets or sets the session outcome.
            /// </summary>
            [Column]
            public string SessionOutcome { get; set; }

            /// <summary>
            /// Gets or sets the slave report id. Autogenerated by Database, so please be careful when accessing.
            /// </summary>
            [Column(IsPrimaryKey = true, IsDbGenerated = true)]
            public int SlaveReportId { get; set; }

            /// <summary>
            /// Gets or sets the time of report.
            /// </summary>
            [Column]
            public DateTime TimeOfReport { get; set; }

            /// <summary>
            /// Gets or sets the time span.
            /// </summary>
            [Column]
            public long TimeSpan { get; set; }

            /// <summary>
            /// Gets or sets the user id.
            /// </summary>
            [Column]
            public long UserId { get; set; }

            /// <summary>
            ///     Load all Slave Reports from a User
            /// </summary>
            /// <param name="user">The User to Load</param>
            /// <returns>All Reports for Slave</returns>
            public static IQueryable<SlaveReport> Load(DiscordUser user)
            {
                long id = Convert.ToInt64(user.Id);

                return from report in GetMainTable() where report.UserId == id select report;
            }

            /// <summary>
            ///     Load all Slave reports between two Dates
            /// </summary>
            /// <param name="user">User to Load</param>
            /// <param name="startDate">Start Date</param>
            /// <param name="endDate">End Date</param>
            /// <returns>Multiple Reports for Slave</returns>
            public static IQueryable<SlaveReport> Load(DiscordUser user, DateTime startDate, DateTime endDate)
            {
                IQueryable<SlaveReport> reports = Load(user);

                return from report in reports
                       where report.TimeOfReport > startDate && report.TimeOfReport < endDate
                       select report;
            }

            /// <summary>
            ///     Load all SlaveReports between specified Dates
            /// </summary>
            /// <param name="startDate">Start Date</param>
            /// <param name="endDate">End Date</param>
            /// <returns>Multiple Report of Slave</returns>
            public static IQueryable<SlaveReport> Load(DateTime startDate, DateTime endDate)
            {
                return from report in GetMainTable()
                       where report.TimeOfReport > startDate && report.TimeOfReport < endDate
                       select report;
            }

            /// <summary>
            /// Saves the Report to the DB
            /// </summary>
            public void Save()
            {
                Table<SlaveReport> db = GetMainTable();
                db.InsertOnSubmit(this);
                db.Context.SubmitChanges();
            }

            /// <summary>
            /// Gets the Main Table
            /// </summary>
            /// <returns>Main Table used here</returns>
            private static Table<SlaveReport> GetMainTable()
            {
                var db = new DataContext(Configuration.Config.DataBaseConnectionString);
                return db.GetTable<SlaveReport>();
            }
        }

        /// <summary>
        /// Post from Tumblr. can be saved to DB.
        /// </summary>
        [Table(Name = "TumblrPosts")]
        public class TumblrPost
        {
            /// <summary>
            /// Gets or sets a value, showing if the Post is loli.
            /// </summary>
            [SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1650:ElementDocumentationMustBeSpelledCorrectly", Justification = "Reviewed. Suppression is OK here.")]
            [Column]
            public long IsLoli { get; set; } = -1;

            /// <summary>
            /// Gets or sets the time, this was last posted.
            /// </summary>
            [Column]
            public DateTime? LastPosted { get; set; }

            /// <summary>
            /// Gets or sets the tumblr id.
            /// </summary>
            [Column(IsPrimaryKey = true, IsDbGenerated = false, Name = "TumblrID")]
            public long TumblrId { get; set; }

            /// <summary>
            /// Loads a Tumblr Post.
            /// </summary>
            /// <param name="tumblrId">
            /// The tumblr id.
            /// </param>
            /// <returns>
            /// The <see cref="TumblrPost"/>.
            /// </returns>
            public static TumblrPost Load(long tumblrId)
            {
                return (from posts in GetMainTable() where posts.TumblrId == tumblrId select posts).FirstOrDefault();
            }

            /// <summary>
            /// Save this to DB
            /// </summary>
            public void Save()
            {
                Table<TumblrPost> db = GetMainTable();

                if (db.Any(post => post.TumblrId == this.TumblrId))
                {
                    IQueryable<TumblrPost> tumblrPosts = from posts in db where posts.TumblrId == this.TumblrId select posts;

                    foreach (var post in tumblrPosts)
                    {
                        post.IsLoli = this.IsLoli;
                        post.LastPosted = this.LastPosted;
                    }

                    db.Context.SubmitChanges();
                }
                else
                {
                    db.InsertOnSubmit(this);
                    db.Context.SubmitChanges();
                }
            }

            private static Table<TumblrPost> GetMainTable()
            {
                var db = new DataContext(Configuration.Config.DataBaseConnectionString);
                return db.GetTable<TumblrPost>();
            }
        }

        /// <summary>
        ///     Users Table
        /// </summary>
        [Table(Name = "Users")]
        public class User
        {
            /// <summary>
            ///     Gets or sets the reason for ban
            /// </summary>
            [Column(Name = "BanReason", DbType = "nvarchar(max)")]
            public string BanReason { get; set; }

            /// <summary>
            ///     Gets or sets time banned
            /// </summary>
            [Column(Name = "BanTime", DbType = "datetime")]
            public DateTime? BanTime { get; set; }

            /// <summary>
            ///     Gets or sets time denied
            /// </summary>
            [Column(Name = "DenialTime", DbType = "datetime")]
            public DateTime? DenialTime { get; set; }

            /// <summary>
            ///     Gets or sets the reason for lock
            /// </summary>
            [Column(Name = "LockReason", DbType = "nvarchar(max)")]
            public string LockReason { get; set; }

            /// <summary>
            ///     Gets or sets time locked from the wheel
            /// </summary>
            [Column(Name = "LockTime", DbType = "datetime")]
            public DateTime? LockTime { get; set; }

            /// <summary>
            ///     Gets or sets the reason for ban
            /// </summary>
            [Column(Name = "MuteReason", DbType = "nvarchar(max)")]
            public string MuteReason { get; set; }

            /// <summary>
            ///     Gets or sets time muted
            /// </summary>
            [Column(Name = "MuteTime", DbType = "datetime")]
            public DateTime? MuteTime { get; set; }

            /// <summary>
            ///     Gets or sets time only ruins are permitted
            /// </summary>
            [Column(Name = "RuinTime", DbType = "datetime")]
            public DateTime? RuinTime { get; set; }

            /// <summary>
            ///     Gets or sets the reason for the special time
            /// </summary>
            [Column(Name = "SpecialReason", DbType = "nvarchar(max)")]
            public string SpecialReason { get; set; }

            /// <summary>
            ///     Gets or sets time for special tasks
            /// </summary>
            [Column(Name = "SpecialTime", DbType = "datetime")]
            public DateTime? SpecialTime { get; set; }

            /// <summary>
            ///     Gets or sets the edges a User has ever did
            /// </summary>
            [Column(Name = "TotalEdges", DbType = "int")]
            public int? TotalEdges { get; set; }

            /// <summary>
            ///     Gets or sets UserId
            /// </summary>
            [Column(IsPrimaryKey = true, DbType = "bigint", Name = "UserID")]
            public ulong UserId { get; set; }

            /// <summary>
            ///     Gets or sets the edges a User has to do
            /// </summary>
            [Column(Name = "WalletEdges", DbType = "int")]
            public int? WalletEdges { get; set; }

            /// <summary>
            ///     Load User from Table by Discord User
            /// </summary>
            /// <param name="user">User provided by Discord</param>
            /// <returns>User from Table</returns>
            public static User Load(DiscordUser user)
            {
                return (from settings in GetMainTable() where settings.UserId == user.Id select settings).FirstOrDefault();
            }

            /// <summary>
            /// Save this Report to the Database
            /// </summary>
            public void Save()
            {
                Table<User> db = GetMainTable();

                if (db.Any(e => e.UserId == this.UserId))
                {
                    IQueryable<User> user = from users in db where users.UserId == this.UserId select users;

                    foreach (var userRow in user)
                    {
                        userRow.UserId = this.UserId;
                        userRow.BanTime = this.BanTime;
                        userRow.BanReason = this.BanReason;
                        userRow.MuteTime = this.MuteTime;
                        userRow.MuteReason = this.MuteReason;
                        userRow.LockTime = this.LockTime;
                        userRow.LockReason = this.LockReason;
                        userRow.DenialTime = this.DenialTime;
                        userRow.RuinTime = this.RuinTime;
                        userRow.SpecialTime = this.SpecialTime;
                        userRow.SpecialReason = this.SpecialReason;
                        userRow.WalletEdges = this.WalletEdges;
                        userRow.TotalEdges = this.TotalEdges;
                    }

                    db.Context.SubmitChanges();
                }
                else
                {
                    db.InsertOnSubmit(this);
                    db.Context.SubmitChanges();
                }
            }

            public void Reset()
            {
                this.BanTime = DateTime.Now;
                this.MuteTime = DateTime.Now;
                this.LockTime = DateTime.Now;
                this.DenialTime = DateTime.Now;
                this.RuinTime = DateTime.Now;
                this.SpecialTime = DateTime.Now;

                this.Save();
            }

            /// <summary>
            ///     Get Main Table
            /// </summary>
            /// <returns>Table of Users</returns>
            private static Table<User> GetMainTable()
            {
                var db = new DataContext(Configuration.Config.DataBaseConnectionString);
                return db.GetTable<User>();
            }
        }

        /// <summary>
        /// The Setting of one User.
        /// </summary>
        [Table(Name = "UserSettings")]
        public class UserSetting
        {
            /// <summary>
            /// The wheel difficulty.
            /// </summary>
            private WheelDifficultySetting? wheelDifficulty;

            /// <summary>
            /// The wheel task preference.
            /// </summary>
            private WheelPreferenceSetting? wheelTaskPreference;

            /// <summary>
            /// The wheel difficulty setting.
            /// Always name something User-Readable
            /// </summary>
            public enum WheelDifficultySetting
            {
                /// <summary>
                /// Easiest Setting.
                /// </summary>
                Baby,

                /// <summary>
                /// Easy Setting
                /// </summary>
                Easy,

                /// <summary>
                /// The Default Setting. Should never be changed in DB.
                /// </summary>
                Default,

                /// <summary>
                /// Hard Setting.
                /// </summary>
                Hard,

                /// <summary>
                /// The hardest Setting.
                /// </summary>
                Masterbater
            }

            /// <summary>
            /// The wheel preference setting.
            /// Supports <see cref="FlagsAttribute"/>
            /// Always name something User-Readable.
            /// </summary>
            [Flags]
            public enum WheelPreferenceSetting
            {
                /// <summary>
                /// The default setting.
                /// </summary>
                Default = 0,

                /// <summary>
                /// Set to prefer Time-Based
                /// </summary>
                Time = 1,

                /// <summary>
                /// Set to prefer Amount-based
                /// </summary>
                Amount = 2,

                /// <summary>
                /// Set to prefer Task-based
                /// </summary>
                Task = 4
            }

            /// <summary>
            /// Gets or sets the user id. Handled by Discord. So never Change.
            /// </summary>
            [Column(IsPrimaryKey = true, Name = "UserID")]
            public long UserId { get; set; }

            /// <summary>
            /// Gets or sets the wheel difficulty.
            /// </summary>
            [Column]
            public int? WheelDifficulty
            {
                get => (int?)this.wheelDifficulty;
                set => this.wheelDifficulty = (WheelDifficultySetting?)value;
            }

            /// <summary>
            /// Gets or sets the wheel task preference.
            /// </summary>
            [Column]
            public int? WheelTaskPreference
            {
                get => (int?)this.wheelTaskPreference;
                set => this.wheelTaskPreference = (WheelPreferenceSetting?)value;
            }

            /// <summary>
            /// Load a specific User.
            /// </summary>
            /// <param name="user">
            /// The user.
            /// </param>
            /// <returns>
            /// The <see cref="UserSetting"/>.
            /// </returns>
            public static UserSetting Load(DiscordUser user)
            {
                long id = Convert.ToInt64(user.Id);

                return (from settings in GetMainTable() where settings.UserId == id select settings).FirstOrDefault();
            }

            /// <summary>
            /// Save this to DB.
            /// </summary>
            public void Save()
            {
                Table<UserSetting> db = GetMainTable();

                if (db.Any(e => e.UserId == this.UserId))
                {
                    IQueryable<UserSetting> setting = from settings in db where settings.UserId == this.UserId select settings;

                    foreach (var settingRow in setting)
                    {
                        settingRow.WheelDifficulty = this.WheelDifficulty;
                        settingRow.WheelTaskPreference = this.WheelTaskPreference;
                    }

                    db.Context.SubmitChanges();
                }
                else
                {
                    db.InsertOnSubmit(this);
                    db.Context.SubmitChanges();
                }
            }

            private static Table<UserSetting> GetMainTable()
            {
                var db = new DataContext(Configuration.Config.DataBaseConnectionString);
                return db.GetTable<UserSetting>();
            }
        }

        /// <summary>
        /// The wheel chance for a specific Difficulty.
        /// </summary>
        [Table(Name = "WheelChances")]
        public class WheelChance
        {
            /// <summary>
            /// Gets or sets the denial Chance.
            /// </summary>
            [Column]
            public int Denial { get; set; }

            /// <summary>
            /// Gets or sets the difficulty of this.
            /// </summary>
            [Column(IsPrimaryKey = true)]
            public int Difficulty { get; set; }

            /// <summary>
            /// Gets or sets the orgasm Chance.
            /// </summary>
            [Column]
            public int Orgasm { get; set; }

            /// <summary>
            /// Gets or sets the ruin Chance.
            /// </summary>
            [Column]
            public int Ruin { get; set; }

            /// <summary>
            /// Gets or sets the task Chance.
            /// </summary>
            [Column]
            public int Task { get; set; }

            /// <summary>
            /// Load Chances for Difficulty
            /// </summary>
            /// <param name="difficulty">
            /// The difficulty.
            /// </param>
            /// <returns>
            /// The <see cref="WheelChance"/>.
            /// </returns>
            public static WheelChance Load(int difficulty)
            {
                return (from chances in GetMainTable() where chances.Difficulty == difficulty select chances)
                    .FirstOrDefault();
            }

            /// <summary>
            /// Gets the Main Table
            /// </summary>
            /// <returns>
            /// The <see cref="Table"/>.
            /// </returns>
            private static Table<WheelChance> GetMainTable()
            {
                var db = new DataContext(Configuration.Config.DataBaseConnectionString);
                return db.GetTable<WheelChance>();
            }
        }

        [Table(Name = "Messages")]
        public class Message
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="Message"/> class.
            /// </summary>
            /// <param name="authorId">The Author's id</param>
            /// <param name="text">The Messages Text</param>
            /// <param name="channelId">The Channel ID</param>
            /// <param name="creationTime">The Creation Time</param>
            public Message(ulong authorId, string text, ulong channelId, DateTime creationTime)
            {
                this.AuthorId = authorId;
                this.MessageText = text;
                this.ChannelId = channelId;
                this.CreationDate = creationTime;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="Message"/> class. 
            /// </summary>
            public Message()
            {
            }

            /// <summary>
            /// Gets or sets the MessageID
            /// </summary>
            [Column(Name = "MessageID", IsPrimaryKey = true, IsDbGenerated = true)]
            public int MessageId { get; set; }

            /// <summary>
            /// Gets or sets the Author ID
            /// </summary>
            [Column(Name = "AuthorID", DbType = "bigint")]
            public ulong AuthorId { get; set; }

            /// <summary>
            /// Gets or sets the Message Text
            /// </summary>
            [Column(Name = "MessageText", DbType = "ntext")]
            public string MessageText { get; set; }

            /// <summary>
            /// Gets or sets the Channel ID
            /// </summary>
            [Column(Name = "ChannelID", DbType = "bigint")]
            public ulong ChannelId { get; set; }

            /// <summary>
            /// Gets or sets the task Chance.
            /// </summary>
            [Column(Name = "CreationDate")]
            public DateTime CreationDate { get; set; }

            /// <summary>
            /// Load a Message by ID
            /// </summary>
            /// <param name="id">
            /// The message id.
            /// </param>
            /// <returns>
            /// The <see cref="Message"/>.
            /// </returns>
            public static Message Load(int id)
            {
                return (from messages in GetMainTable() where messages.MessageId == id select messages)
                    .FirstOrDefault();
            }

            /// <summary>
            /// Saves the newly created Message. Edit is not possible rn.
            /// </summary>
            public void Save()
            {
                Table<Message> db = GetMainTable();
                db.InsertOnSubmit(this);
                db.Context.SubmitChanges();
            }

            /// <summary>
            /// Gets the Main Table
            /// </summary>
            /// <returns>
            /// A <see cref="Table"/>.
            /// </returns>
            private static Table<Message> GetMainTable()
            {
                var db = new DataContext(Configuration.Config.DataBaseConnectionString);
                return db.GetTable<Message>();
            }
        }
    }
}